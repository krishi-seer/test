"use client";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { useState, useEffect } from "react";
import { useTranslation } from "react-i18next";
import Button from "@/components/ui/button";
import { supabase } from "@/lib/supabase";

const IrrigationPage = () => {
  const { t } = useTranslation();
  const [currentMoisture, setCurrentMoisture] = useState(65);
  const [nextIrrigation, setNextIrrigation] = useState("2 days");
  const [cropType, setCropType] = useState("rice");
  const [fieldSize, setFieldSize] = useState(1);
  const [userName, setUserName] = useState("");
  const [userId, setUserId] = useState<string | null>(null);
  const [reminderSet, setReminderSet] = useState(false);
  const [weatherForecast, setWeatherForecast] = useState([
    { day: "Today", temp: 28, humidity: 65, rain: 0 },
    { day: "Tomorrow", temp: 30, humidity: 70, rain: 5 },
    { day: "Day 3", temp: 26, humidity: 80, rain: 15 }
  ]);

  useEffect(() => {
    const loadUserData = async () => {
      try {
        const { data: sessionData } = await supabase.auth.getSession();
        const email = sessionData?.session?.user?.email;
        const userIdFromSession = sessionData?.session?.user?.id;
        setUserId(userIdFromSession || null);
        
        if (email) {
          const username = email.split("@")[0];
          const { data } = await supabase.from("farmers").select("name").eq("username", username).maybeSingle();
          setUserName(data?.name || username || "Farmer");
        }
      } catch {
        setUserName("Guest");
      }
    };
    loadUserData();
  }, []);

  const getIrrigationRecommendation = () => {
    const riceOptimal = { min: 70, max: 85 };
    const wheatOptimal = { min: 60, max: 75 };
    const optimal = cropType === "rice" ? riceOptimal : wheatOptimal;
    
    if (currentMoisture < optimal.min) {
      return {
        status: "urgent",
        message: "Irrigate immediately - soil moisture below optimal",
        amount: "25-30mm",
        timing: "Early morning (6-8 AM)"
      };
    } else if (currentMoisture > optimal.max) {
      return {
        status: "wait",
        message: "Wait - risk of waterlogging",
        amount: "0mm",
        timing: "Monitor daily"
      };
    } else {
      return {
        status: "optimal",
        message: "Soil moisture optimal - light irrigation in 2 days",
        amount: "15-20mm",
        timing: "Early morning"
      };
    }
  };

  const recommendation = getIrrigationRecommendation();

  const setIrrigationReminder = async () => {
    if (!userId) {
      alert("Please log in to set reminders");
      return;
    }

    try {
      const reminderData = {
        user_id: userId,
        crop_type: cropType,
        field_size: fieldSize,
        soil_moisture: currentMoisture,
        recommendation: recommendation.message,
        water_amount: recommendation.amount,
        timing: recommendation.timing,
        next_irrigation: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000).toISOString(),
        created_at: new Date().toISOString()
      };

      const { error } = await supabase.from("irrigation_reminders").insert([reminderData]);
      
      if (error) {
        console.error("Error setting reminder:", error);
        alert("Error setting reminder. Please try again.");
      } else {
        setReminderSet(true);
        alert("Irrigation reminder set successfully!");
      }
    } catch (error) {
      console.error("Error:", error);
      alert("Error setting reminder. Please try again.");
    }
  };

  const exportSchedule = () => {
    const schedule = {
      farmer: userName,
      date: new Date().toLocaleDateString(),
      cropType: cropType,
      fieldSize: `${fieldSize} acres`,
      currentMoisture: `${currentMoisture}%`,
      recommendation: recommendation.message,
      waterAmount: recommendation.amount,
      timing: recommendation.timing,
      nextIrrigation: nextIrrigation,
      weatherForecast: weatherForecast
    };

    const scheduleText = `
# Irrigation Schedule - ${userName}

**Date:** ${schedule.date}
**Crop Type:** ${schedule.cropType}
**Field Size:** ${schedule.fieldSize}
**Current Soil Moisture:** ${schedule.currentMoisture}

## Recommendation
${schedule.recommendation}

**Water Amount:** ${schedule.waterAmount}
**Best Timing:** ${schedule.timing}
**Next Check:** ${schedule.nextIrrigation}

## 3-Day Weather Forecast
${weatherForecast.map(day => `- ${day.day}: ${day.temp}¬∞C, ${day.humidity}% humidity, ${day.rain}% rain chance`).join('\n')}

---
Generated by Krishi-Seer Agricultural Intelligence Platform
    `;

    const blob = new Blob([scheduleText], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `irrigation-schedule-${userName}-${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <div className="p-4 space-y-6">
      <div className="bg-gradient-to-r from-blue-500 to-cyan-600 rounded-2xl p-6 text-white shadow-lg">
        <h1 className="text-2xl font-bold mb-1">Smart Irrigation Scheduler</h1>
        <p className="text-blue-100">AI-powered water management for 3-5% yield increase</p>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <Card className="border-none shadow-md">
          <CardHeader>
            <CardTitle className="text-xl font-bold text-gray-800">Current Status</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div>
                <div className="flex justify-between mb-2">
                  <span className="font-medium">Soil Moisture</span>
                  <span className="text-lg font-bold text-blue-600">{currentMoisture}%</span>
                </div>
                <div className="w-full bg-gray-200 rounded-full h-3">
                  <div 
                    className="bg-blue-500 h-3 rounded-full transition-all duration-300"
                    style={{ width: `${currentMoisture}%` }}
                  ></div>
                </div>
              </div>
              
              <div className="space-y-3">
                <div className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                  <span className="font-medium">Crop Type</span>
                  <select 
                    value={cropType} 
                    onChange={(e) => setCropType(e.target.value)}
                    className="border border-gray-300 rounded px-3 py-1"
                  >
                    <option value="rice">Rice/Paddy</option>
                    <option value="wheat">Wheat</option>
                    <option value="maize">Maize</option>
                    <option value="cotton">Cotton</option>
                  </select>
                </div>
                
                <div className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                  <span className="font-medium">Field Size (acres)</span>
                  <input 
                    type="number" 
                    value={fieldSize} 
                    onChange={(e) => setFieldSize(Number(e.target.value))}
                    className="border border-gray-300 rounded px-3 py-1 w-20"
                    min="0.1"
                    step="0.1"
                  />
                </div>
                
                {userName && (
                  <div className="flex items-center justify-between p-3 bg-blue-50 rounded-lg">
                    <span className="font-medium">Farmer</span>
                    <span className="text-blue-700 font-semibold">{userName}</span>
                  </div>
                )}
              </div>
            </div>
          </CardContent>
        </Card>

        <Card className="border-none shadow-md">
          <CardHeader>
            <CardTitle className="text-xl font-bold text-gray-800">AI Recommendation</CardTitle>
          </CardHeader>
          <CardContent>
            <div className={`p-4 rounded-lg ${
              recommendation.status === 'urgent' ? 'bg-red-50 border border-red-200' :
              recommendation.status === 'wait' ? 'bg-yellow-50 border border-yellow-200' :
              'bg-green-50 border border-green-200'
            }`}>
              <div className="flex items-center mb-2">
                <div className={`w-3 h-3 rounded-full mr-3 ${
                  recommendation.status === 'urgent' ? 'bg-red-500' :
                  recommendation.status === 'wait' ? 'bg-yellow-500' :
                  'bg-green-500'
                }`}></div>
                <span className="font-semibold">{recommendation.message}</span>
              </div>
              <div className="space-y-2 text-sm text-gray-600">
                <div>üíß Amount: {recommendation.amount}</div>
                <div>‚è∞ Best Time: {recommendation.timing}</div>
                <div>üìÖ Next Check: {nextIrrigation}</div>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      <Card className="border-none shadow-md">
        <CardHeader>
          <CardTitle className="text-xl font-bold text-gray-800">3-Day Weather Forecast</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-3 gap-4">
            {weatherForecast.map((day, index) => (
              <div key={index} className="text-center p-4 bg-gray-50 rounded-lg">
                <div className="font-semibold mb-2">{day.day}</div>
                <div className="text-2xl mb-1">{day.temp}¬∞C</div>
                <div className="text-sm text-gray-600">
                  <div>üíß {day.humidity}% humidity</div>
                  <div>üåßÔ∏è {day.rain}% rain chance</div>
                </div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      <div className="flex gap-4">
        <Button 
          onClick={setIrrigationReminder}
          className={`flex-1 ${reminderSet ? 'bg-green-500 hover:bg-green-600' : 'bg-blue-500 hover:bg-blue-600'}`}
          disabled={!userId}
        >
          {reminderSet ? '‚úì Reminder Set' : 'Set Irrigation Reminder'}
        </Button>
        <Button 
          onClick={exportSchedule}
          variant="outline" 
          className="flex-1"
        >
          üìÑ Export Schedule
        </Button>
      </div>
      
      {!userId && (
        <div className="mt-4 p-3 bg-yellow-50 border border-yellow-200 rounded-lg text-center">
          <span className="text-yellow-800 text-sm">
            üí° Please <a href="/login" className="underline font-medium">log in</a> to set personalized reminders and save your irrigation schedule.
          </span>
        </div>
      )}
    </div>
  );
};

export default IrrigationPage;